name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # Job to setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Cache dependencies
      id: cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
          
    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit

  # Parallel quality checks
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit
      
    - name: Run ESLint
      run: npm run lint -- --format=json --output-file=eslint-report.json
      continue-on-error: true
      
    - name: Run TypeScript check
      run: npm run type-check
      
    - name: Upload lint results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lint-results
        path: eslint-report.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        test-group: [core, ai, integration]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit
      
    - name: Run tests
      run: |
        case "${{ matrix.test-group }}" in
          "core")
            npm run test -- --testPathIgnorePatterns="ai|integration"
            ;;
          "ai")
            npm run test:ai
            ;;
          "integration")
            npm run test:integration
            ;;
        esac
      env:
        CI: true
        GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        flags: ${{ matrix.test-group }}
        name: ${{ matrix.test-group }}-coverage

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate --json > audit-results.json
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json > snyk-results.json
      continue-on-error: true
        
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: |
          audit-results.json
          snyk-results.json

  ai-validation:
    name: AI Model Validation
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit
      
    - name: Validate AI models
      run: npm run validate-ai-models
      env:
        GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, unit-tests, security-audit, ai-validation]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
          .next/cache
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit
      
    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: .next/
        retention-days: 1

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        browser: [chromium, firefox]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        
    - name: Install dependencies
      if: needs.setup.outputs.cache-hit != 'true'
      run: npm ci --prefer-offline --no-audit
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: .next/
        
    - name: Install Playwright browsers
      run: npx playwright install ${{ matrix.browser }} --with-deps
      
    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-results-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/
        retention-days: 7

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
      
    - name: Pull Vercel Environment Information
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        else
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        fi
      
    - name: Build Project Artifacts
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
        else
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        fi
      
    - name: Deploy Project Artifacts
      id: deploy
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        else
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        fi
        echo "deployment_url=$url" >> $GITHUB_OUTPUT
        
    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Preview deployment ready at: ${{ steps.deploy.outputs.deployment_url }}`
          })

  post-deploy-checks:
    name: Post-Deploy Health Checks
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Health check
      run: |
        sleep 30
        curl -f ${{ needs.deploy.outputs.deployment_url }}/api/health || exit 1
        
    - name: Performance audit
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun --upload.target=temporary-public-storage
      env:
        LHCI_TARGET_URL: ${{ needs.deploy.outputs.deployment_url }}